// Code generated by go-bindata. DO NOT EDIT.
// sources:
// assets/index.html

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\xdf\x77\x9b\x38\x16\x7e\xef\x5f\xa1\xb2\x0f\xe3\x9e\x16\xf0\x8f\xc4\x89\xbd\xc6\x67\x3d\x6d\x92\x75\x32\x49\x9d\x78\xd2\xa4\xb3\x67\x1f\x84\xb8\x80\x6c\x21\x51\x49\xe0\x78\x7b\xf2\xbf\xef\x01\xea\x24\x36\xe0\x38\x9b\xee\x9c\xd1\x13\xdc\xfb\xf1\xdd\x7b\xa5\xab\x4f\xc0\x20\xd4\x11\x1b\xbe\x41\x08\xa1\x41\x08\xd8\x2b\x2e\xf3\x5b\x4d\x35\x83\xe1\x94\x46\x31\x03\x34\xba\x99\xa2\x73\xcc\x71\x00\x72\x60\x17\x9e\x47\x24\xa3\x7c\x8e\x24\x30\xc7\x50\x7a\xc9\x40\x85\x00\xda\x40\xa1\x04\xdf\x31\x42\xad\x63\xd5\xb7\xed\x08\xdf\x11\x8f\x5b\xae\x10\x5a\x69\x89\xe3\xec\x86\x88\xc8\x7e\x30\xd8\x7b\x56\xd3\x6a\xda\x44\xa9\x47\x9b\x15\x51\x6e\x11\xa5\x0c\x44\xb9\x86\x40\x52\xbd\x74\x0c\x15\xe2\xce\xe1\x9e\x79\xc2\xf7\x3b\x87\x7b\x77\xdf\x2e\x5b\x58\xdc\xdc\x8e\xde\x37\xf7\x0f\xaf\x6e\x27\x77\x93\xa0\xeb\x2f\xf7\xc6\x37\xe9\xef\x17\x61\xf3\xa8\xdd\xed\xdc\x46\xc7\xe4\x94\x4d\x47\x0b\x7a\x12\x1c\x8f\x6e\x6c\x6f\x44\xa7\xdd\xd3\xdb\xc8\x40\x44\x0a\xa5\x84\xa4\x01\xe5\x8e\x81\xb9\xe0\xcb\x48\x24\xca\x78\x52\x98\x22\x92\xc6\x1a\x29\x49\x1e\x0b\x21\xc2\x03\x6b\xf6\x2d\x01\xb9\xcc\x0b\x28\x2e\xcd\x8e\xd5\xb6\x5a\x96\x62\x34\xca\x93\x9e\x55\xe6\x7c\x76\xda\x11\xed\x4f\x67\x7a\x3c\x4f\xbf\x8e\xcf\x3a\xd7\x47\x17\xff\x89\xce\x0f\xce\x3e\xce\xaf\xa4\x2d\x8f\x7a\xf6\x65\x1c\x74\xf1\xe8\x8f\x93\xd3\xc5\xf1\xa7\xf3\x2f\x17\x23\xfb\x24\x3e\x39\x3e\xee\x75\xc2\xdb\xf8\x64\xff\x6c\x7e\x51\x9f\xf3\xc0\x2e\x72\x7d\x2e\x79\x8f\xcf\x94\x45\x98\x48\x3c\x9f\x61\x09\x79\x05\x78\x86\xef\x6c\x46\x5d\x65\xc7\x22\x8e\x41\x5a\x33\x65\xb7\xac\x56\xdb\xea\xd9\x49\xe4\xad\x8c\xf5\x55\x8d\xe2\x0b\x37\x08\x7b\xbf\xbe\xff\xda\xba\x3c\xd3\x69\xe7\x8a\x1f\xdc\x74\xa2\x60\x72\x17\x5e\xf7\xce\xec\x29\xb9\x54\xa3\xc9\x41\x78\x4d\xdd\xdb\x4e\x6f\x76\xe0\xe3\xf9\xf1\x44\xcd\xd3\xdb\x44\xa5\x3e\x6e\xba\x7b\x97\xaf\xae\x6a\xd7\xde\x9a\x6d\xb6\x56\x75\x3d\xa7\x7f\x5c\x75\xa7\x31\xcc\xc2\xbd\xeb\x66\xdb\x3b\x9c\x7d\xd6\xdd\xf4\xb7\xa3\x7f\xfa\x60\x9f\x5e\x9e\xd0\xab\xab\xe9\xe5\xe5\xdd\xd4\x3f\xbe\x89\x69\xeb\xfc\x5b\xf2\xc5\x1b\x2d\x67\xd7\x58\xee\xbf\x3f\xe8\x4e\xbe\x7c\x8c\xbe\xb2\xff\xf7\x2a\x49\x20\x82\x73\x20\x9a\xf2\xc0\x5c\x80\xab\x04\x99\x83\xb6\x5b\x79\x8d\xd5\xce\x55\xb5\x2f\xc8\xc0\x9a\x29\x0f\x18\x4d\xa5\xc5\x41\xdb\x3c\x8e\xec\x08\x93\xe5\x3f\xda\x56\xc7\x6a\xda\x1e\x55\x3a\xbf\xff\x29\xc4\x69\x02\x05\x63\x9a\x40\x05\xd9\xc0\x7e\x54\xa6\x81\x2b\xbc\xe5\x93\x18\x61\x6b\x98\x49\xd3\xd1\xc7\x36\x1a\x73\xa5\x31\x27\xa0\x06\x76\xd8\x7a\x02\x79\x6b\x9a\x68\xe0\xd1\x14\x11\x86\x95\x72\x0c\x22\xb8\xc6\x94\x83\x34\x86\xa6\xf9\x88\xcb\xb1\x19\x8c\x7a\x8e\x01\xa4\x6d\xd2\x15\x9f\x31\x44\x6b\xa8\x07\xe4\x8a\x10\x4b\x0f\x91\x90\x32\xcf\x04\x06\x11\x70\x6d\xa0\x5c\x08\x1d\x63\x41\x3d\x1d\xf6\x51\xa7\xd9\x8c\xef\xfe\x6e\xa0\xd4\xf4\x85\x74\x0c\xca\x15\xa2\x1c\x3d\x09\x50\xe2\xaf\x8a\x61\x66\xb5\xd7\x60\x8b\xc9\xd8\x5f\x83\xe7\x32\x6d\x0c\xbf\x7f\xa7\x5c\x59\x17\x38\x82\xfb\xfb\x81\x1d\xb6\xb7\x11\x74\xd7\x08\x54\xe2\xe6\x1c\x28\x72\xcd\x36\xd2\x70\xa7\xcd\x28\xd1\xe0\xad\x38\x57\x33\x3e\xfe\x94\x33\x77\xb7\x30\x27\x6c\xc5\xcc\xa8\xd2\x66\x20\x45\x12\xa3\xc7\x4b\xd3\x67\x89\x0a\xb7\xd4\x86\x8a\x73\xa6\x4c\x62\x52\x0d\x91\x31\x9c\x24\x2e\xa3\x04\x8d\x27\x7d\x54\xe4\x56\x18\xc6\x93\x2c\x33\x46\x5f\x41\x2c\x69\x8a\x35\x3c\x65\x2e\x2c\xaf\xa7\xfe\x15\x93\x79\x12\x23\xe0\xd8\x65\xe0\xad\xe8\xc7\x2a\xb3\x83\x77\x1d\xbf\x96\xff\x13\xa4\xc0\x44\x9c\x35\xe4\xcf\x27\xff\x98\x48\x09\x5c\x23\xa5\xb1\x86\x15\xfd\x34\xbb\x79\x8e\x79\x60\x27\x6c\x8b\xf7\x85\x4d\x9f\x3f\xe3\x26\x5a\x0b\x8e\x52\x53\xf0\x3e\x61\x94\xcc\x33\x2d\x4f\xb4\x27\x16\xbc\x41\xb9\x7a\x67\xac\x18\x5d\xcd\x91\xab\xb9\x19\x4b\x1a\x61\xb9\x34\x86\xd3\x1f\xb0\x81\x5d\x70\xfc\x0f\x81\x34\x96\xfa\xb9\x28\x19\xe6\xf9\x10\x03\xdb\xa3\x69\x8d\x16\x54\xbb\x2a\xcc\x1b\xa6\x42\xfe\x72\x5b\xa6\x76\x9b\xea\xbc\xfe\x6c\x8a\x25\xc2\x71\x8c\x1c\xc4\x61\x81\xbe\x24\xd0\xf8\x5e\x0a\x09\xac\x8f\x8c\xbf\xad\x0b\xe4\x87\x12\x6a\xa1\xfa\x88\x27\x8c\x95\x3d\xd9\xa9\xb1\xcd\xf7\x3b\x8d\x40\xd6\x01\x3c\xac\x71\x1f\x95\x93\xca\xc6\x43\x3a\x7d\xf4\xaf\x4a\xc0\xbf\x4b\xd6\xfb\x8a\x14\x40\x87\xc2\x53\x75\x41\x56\x6d\xd5\x47\x7e\xc2\x89\xa6\xa2\x68\xb0\x1a\x74\x36\x88\xe0\x4a\x30\xb0\x98\x08\x72\x68\x2d\x90\xfa\x0d\x1d\x52\x65\x2d\xb6\xd2\x6d\x52\x1a\x53\xe0\x1e\xe5\x01\x52\x5a\xc4\x08\xe7\x29\x19\xf5\x41\xb2\xf1\x23\x8a\xa5\x80\x7b\x8d\xd3\xe9\xe7\x0b\x4b\x69\x49\x79\x40\xfd\x65\xc5\x7a\x6f\x8e\x51\x1e\xa2\x8f\x8c\x2c\x60\xc5\xca\x6f\x8e\xc7\x43\xa2\x8f\xd6\x0f\x8d\xad\x8f\xde\xbf\xab\x2f\xe2\xbe\xd2\x53\xb1\x98\xd9\xc8\xf7\xe7\x5f\x71\xb9\xb0\xd4\x7f\xf2\x7a\x61\xa9\xff\x52\x0b\x56\xde\x8f\x6f\xd6\x19\xdf\xac\xdd\xe3\x38\xb6\x32\x85\x40\x0e\x3a\xc7\xa4\xaa\xf6\x87\x57\xbb\x5d\x24\x2a\xc2\x32\xa0\xbc\x8f\x5a\xcd\xb2\x8f\x08\x96\x44\x5c\xf5\x51\xb7\xec\x73\x25\xe0\xf9\x48\xd7\x29\x44\xeb\xa0\x7b\x58\xe7\x5b\xa3\xde\x7f\x49\x17\xb7\xf6\x0e\x7a\x3b\xb1\xee\xbd\x88\xb5\x75\xd8\xde\x89\xb5\xf3\x12\xd6\xc3\xde\x6e\xa4\xed\x97\x90\xee\xf7\x76\xab\xbf\xf5\xd3\x5a\x6d\xa1\x7e\x9c\x83\x57\x4f\x3e\xa9\x6e\xc0\x9d\xe6\x5f\x54\x0d\x63\x91\x7d\xcf\x30\x41\x30\x0b\x85\xd2\xfd\x56\xef\xe0\xb0\x69\x2f\xd4\xc6\x66\x2e\x98\x2c\xec\x79\x47\x29\x70\xfd\x1b\x55\x1a\x38\xc8\xc6\x2f\x11\x28\x85\x03\xf8\xe5\xc3\xa3\x34\x41\x95\x92\x64\x67\x72\xf6\xc1\xe0\xa0\x7c\xeb\xc7\x58\x2a\x68\x80\x95\x9d\x84\xe5\x0d\xf7\xac\x7a\x65\x6c\xbe\x48\xb8\x87\x1c\xe4\x63\xa6\xa0\x84\xf0\x85\x6c\x30\xd0\x48\x30\x6f\xcc\x15\x12\x7e\x5e\xc2\xc3\x46\xaa\x13\x3b\xea\x37\x8a\x27\x9e\xe8\x05\x72\x9c\x0d\x05\xd9\x26\x95\x9f\xdd\x19\x10\x6d\x61\xa5\x68\xc0\x7f\x90\x7d\x40\x5b\x35\x78\x55\x89\x96\x49\xb9\x90\xd5\xc8\xf7\xeb\xce\x5d\x51\x32\x51\xbf\xf1\x36\x8f\x53\x97\xfb\xda\xf4\x58\x71\xa2\xc2\xfa\x83\x83\xfa\x8d\x95\x8a\xe5\xef\x39\xe8\xad\x93\xbf\xe9\x6c\x3d\x91\x18\x60\x99\xa1\x45\xa2\xd7\x9f\xae\x8e\x51\x2d\xb6\xeb\x61\x1d\xa4\x40\xaf\x38\x1f\xfa\xef\x1d\xfa\xfe\x80\xb3\x24\x10\xcc\x48\xc2\xb0\x86\xc6\x3b\x74\xff\x01\xb5\xca\xe1\x4a\x9b\x68\x33\x62\x65\xe7\x13\x26\xd4\xf3\x7d\xbf\x08\x29\x83\xc6\xfa\xe4\x32\xe0\x81\x0e\xd1\x10\x35\x77\x5c\x0c\x11\x37\x9e\xcb\xfa\xe9\xe4\xac\x17\x5d\x57\xdc\xe6\xdf\x89\xe2\x97\xc4\xc0\xce\x7f\xa5\xfe\x37\x00\x00\xff\xff\x35\xe0\xb9\xca\x51\x15\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 5457, mode: os.FileMode(420), modTime: time.Unix(1522698806, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7c, 0xf3, 0xad, 0x2a, 0x39, 0x3f, 0x8b, 0x6f, 0x1d, 0xa5, 0x4a, 0x32, 0xf0, 0xb5, 0xc6, 0x13, 0x5d, 0xd6, 0xd7, 0xf6, 0xe2, 0x31, 0x6, 0xd6, 0x18, 0x41, 0xfd, 0x5f, 0xd4, 0xbf, 0x88, 0xcc}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
